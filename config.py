import os
import sys
from dotenv import load_dotenv
import mercadopago

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

# üîß Configura√ß√£o de Debug
DEBUG = os.getenv("DEBUG", "false").lower() == "true"
AMBIENTE = "desenvolvimento" if DEBUG else "produ√ß√£o"

# üîë Credenciais Mercado Pago (produ√ß√£o)
PUBLIC_KEY = os.getenv("PUBLIC_KEY")
TOKEN_MERCADOPAGO = os.getenv("MERCADOPAGO_ACCESS_TOKEN")

# ü§ñ Token do bot do Telegram
TOKEN_BOT = os.getenv("TELEGRAM_TOKEN")

# üë§ IDs e Links
MY_CHAT_ID = os.getenv("MY_CHAT_ID")
GROUP_INVITE_LINK = os.getenv("GROUP_INVITE_LINK")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")

# Converte IDs para int silenciosamente
try:
    if MY_CHAT_ID:
        MY_CHAT_ID = int(MY_CHAT_ID)
    if GROUP_CHAT_ID:
        GROUP_CHAT_ID = int(GROUP_CHAT_ID)
except (ValueError, TypeError):
    pass  # Ser√° tratado na valida√ß√£o

# üí∞ SDK do Mercado Pago - Lazy Loading
_sdk = None
_mp_inicializado = False

def _inicializar_mercadopago():
    """Inicializa o SDK do Mercado Pago (uso interno)"""
    global _sdk, _mp_inicializado
    
    if _mp_inicializado:
        return True
    
    if not TOKEN_MERCADOPAGO:
        return False
    
    try:
        # Inicializa o SDK
        _sdk = mercadopago.SDK(TOKEN_MERCADOPAGO)
        
        # Testa a conex√£o fazendo uma chamada simples
        test_response = _sdk.payment_methods().list_all()
        
        if test_response.get("status") == 200:
            _mp_inicializado = True
            if DEBUG:
                print("‚úÖ SDK Mercado Pago inicializado com sucesso (lazy loading)")
            return True
        else:
            _mp_inicializado = True  # SDK criado, mas resposta n√£o confirmada
            return True
            
    except Exception as e:
        if DEBUG:
            print(f"‚ùå ERRO ao inicializar SDK Mercado Pago: {str(e)}")
        _mp_inicializado = False
        return False

def validar_config(silencioso=False):
    """
    Valida se todas as vari√°veis de ambiente necess√°rias est√£o configuradas
    
    Args:
        silencioso: Se True, n√£o imprime mensagens de erro
    
    Returns:
        tuple: (config_ok, faltando, ids_invalidos)
    """
    variaveis_necessarias = {
        "MERCADOPAGO_ACCESS_TOKEN": TOKEN_MERCADOPAGO,
        "PUBLIC_KEY": PUBLIC_KEY,
        "TELEGRAM_TOKEN": TOKEN_BOT,
        "MY_CHAT_ID": MY_CHAT_ID,
        "GROUP_INVITE_LINK": GROUP_INVITE_LINK,
        "GROUP_CHAT_ID": GROUP_CHAT_ID
    }
    
    # Verifica tamb√©m se os IDs s√£o n√∫meros v√°lidos
    ids_invalidos = []
    if MY_CHAT_ID and not isinstance(MY_CHAT_ID, int):
        ids_invalidos.append("MY_CHAT_ID")
    if GROUP_CHAT_ID and not isinstance(GROUP_CHAT_ID, int):
        ids_invalidos.append("GROUP_CHAT_ID")
    
    faltando = [nome for nome, valor in variaveis_necessarias.items() if not valor]
    config_ok = len(faltando) == 0 and len(ids_invalidos) == 0
    
    # Em produ√ß√£o, imprime erro e para se n√£o estiver OK (a menos que silencioso)
    if not DEBUG and not config_ok and not silencioso:
        erros = []
        if faltando:
            erros.append(f"Vari√°veis faltando: {', '.join(faltando)}")
        if ids_invalidos:
            erros.append(f"IDs inv√°lidos: {', '.join(ids_invalidos)}")
        
        print(f"‚ùå ERRO CR√çTICO: Configura√ß√£o inv√°lida!")
        for erro in erros:
            print(f"   - {erro}")
        print("\nüí° Configure as vari√°veis no Railway ou arquivo .env")
        sys.exit(1)
    
    return config_ok, faltando, ids_invalidos

def get_mercadopago_sdk():
    """
    Retorna a inst√¢ncia do SDK do Mercado Pago
    Inicializa sob demanda (lazy loading) na primeira chamada
    
    Returns:
        mercadopago.SDK: Inst√¢ncia configurada do SDK
        
    Raises:
        Exception: Se n√£o for poss√≠vel inicializar o SDK
    """
    global _sdk, _mp_inicializado
    
    # Lazy loading - s√≥ inicializa quando realmente precisar
    if not _mp_inicializado:
        if not _inicializar_mercadopago():
            raise Exception(
                "SDK do Mercado Pago n√£o pode ser inicializado! "
                "Verifique se MERCADOPAGO_ACCESS_TOKEN est√° configurado corretamente."
            )
    
    if not _sdk:
        raise Exception("SDK do Mercado Pago n√£o est√° dispon√≠vel!")
    
    return _sdk

def sdk_disponivel():
    """
    Verifica se o SDK pode ser inicializado sem realmente faz√™-lo
    
    Returns:
        bool: True se as credenciais est√£o dispon√≠veis
    """
    return bool(TOKEN_MERCADOPAGO)

def mascara_token(token, prefixo_visivel=3, sufixo_visivel=4):
    """
    Mascara um token mostrando apenas in√≠cio e fim
    
    Args:
        token: Token a ser mascarado
        prefixo_visivel: Quantos caracteres mostrar no in√≠cio
        sufixo_visivel: Quantos caracteres mostrar no fim
    
    Returns:
        str: Token mascarado ou None
    """
    if not token:
        return None
    
    if len(token) <= (prefixo_visivel + sufixo_visivel):
        return "***"
    
    return f"{token[:prefixo_visivel]}...{token[-sufixo_visivel:]}"

# üéØ Valida√ß√£o inicial em produ√ß√£o (sem inicializar SDK)
if not DEBUG:
    # Apenas valida configura√ß√£o, n√£o inicializa SDK
    config_ok, _, _ = validar_config(silencioso=False)

# Exporta tudo que outros m√≥dulos precisam
__all__ = [
    'TOKEN_BOT',
    'TOKEN_MERCADOPAGO', 
    'PUBLIC_KEY',
    'MY_CHAT_ID',
    'GROUP_INVITE_LINK',
    'GROUP_CHAT_ID',
    'get_mercadopago_sdk',
    'sdk_disponivel',
    'validar_config',
    'DEBUG',
    'AMBIENTE'
]

# ============================================================
# √ÅREA DE DEBUG E TESTES - S√≥ roda quando executado diretamente
# ============================================================
if __name__ == "__main__":
    print("\n" + "="*60)
    print(f"üîß TESTE DE CONFIGURA√á√ÉO - Ambiente: {AMBIENTE.upper()}")
    print("="*60)
    
    # Valida√ß√£o detalhada
    config_ok, faltando, ids_invalidos = validar_config(silencioso=True)
    
    print("\nüìã STATUS DAS VARI√ÅVEIS:")
    print(f"‚úì MERCADOPAGO_ACCESS_TOKEN: {'‚úÖ Configurado' if TOKEN_MERCADOPAGO else '‚ùå Faltando'}")
    print(f"‚úì PUBLIC_KEY: {'‚úÖ Configurado' if PUBLIC_KEY else '‚ùå Faltando'}")
    print(f"‚úì TELEGRAM_TOKEN: {'‚úÖ Configurado' if TOKEN_BOT else '‚ùå Faltando'}")
    print(f"‚úì MY_CHAT_ID: {MY_CHAT_ID if MY_CHAT_ID else '‚ùå Faltando'}")
    print(f"‚úì GROUP_INVITE_LINK: {'‚úÖ Configurado' if GROUP_INVITE_LINK else '‚ö†Ô∏è Parcial'}")
    print(f"‚úì GROUP_CHAT_ID: {GROUP_CHAT_ID if GROUP_CHAT_ID else '‚ùå Faltando'}")
    
    # Mostra tokens mascarados apenas em DEBUG
    if DEBUG:
        print("\nüîê INFORMA√á√ïES SENS√çVEIS (MODO DEBUG):")
        if TOKEN_MERCADOPAGO:
            # Mostra apenas √∫ltimos 10 caracteres do token MP
            print(f"   Token MP: ***{TOKEN_MERCADOPAGO[-10:]}")
        if PUBLIC_KEY:
            # Mostra public key mascarada
            print(f"   Public Key: {mascara_token(PUBLIC_KEY, 8, 4)}")
        if TOKEN_BOT:
            # Mostra token do bot mascarado
            print(f"   Bot Token: {mascara_token(TOKEN_BOT, 5, 6)}")
    
    if not config_ok:
        print("\n‚ùå PROBLEMAS ENCONTRADOS:")
        if faltando:
            print(f"   - Vari√°veis faltando: {', '.join(faltando)}")
        if ids_invalidos:
            print(f"   - IDs com formato inv√°lido: {', '.join(ids_invalidos)}")
        print("\nüí° Solu√ß√£o: Configure as vari√°veis no arquivo .env")
        sys.exit(1)
    
    print("\n‚úÖ Configura√ß√£o v√°lida!")
    
    # Teste do SDK dispon√≠vel
    if sdk_disponivel():
        print("‚úÖ Credenciais do Mercado Pago dispon√≠veis")
        
        # Pergunta se quer testar inicializa√ß√£o
        if DEBUG:
            print("\nüîÑ Testando inicializa√ß√£o do SDK (lazy loading)...")
            try:
                sdk_test = get_mercadopago_sdk()
                print("‚úÖ SDK inicializado com sucesso sob demanda!")
                print(f"   Tipo do SDK: {type(sdk_test).__name__}")
                
                # Identifica ambiente do Mercado Pago
                if TOKEN_MERCADOPAGO:
                    if 'APP_USR' in TOKEN_MERCADOPAGO:
                        print("   Ambiente MP: Produ√ß√£o")
                    elif 'TEST' in TOKEN_MERCADOPAGO:
                        print("   Ambiente MP: Teste")
                    else:
                        print("   Ambiente MP: N√£o identificado")
                
                # Teste adicional - lista m√©todos de pagamento
                print("\nüìù Testando conex√£o com API...")
                response = sdk_test.payment_methods().list_all()
                if response.get("status") == 200:
                    metodos = response.get("response", [])
                    print(f"‚úÖ API respondendo! {len(metodos)} m√©todos de pagamento dispon√≠veis")
                    
                    # Em DEBUG, mostra alguns m√©todos
                    if metodos and len(metodos) > 0:
                        primeiros = metodos[:3]
                        print("   Exemplos:", ", ".join([m.get("id", "?") for m in primeiros]))
                else:
                    print(f"‚ö†Ô∏è API respondeu com status: {response.get('status')}")
                    
            except Exception as e:
                print(f"‚ùå Erro ao testar SDK: {e}")
                sys.exit(1)
        else:
            print("‚ÑπÔ∏è SDK n√£o foi inicializado (lazy loading ativo)")
            print("   Ser√° inicializado apenas quando get_mercadopago_sdk() for chamado")
    else:
        print("‚ö†Ô∏è Credenciais do Mercado Pago n√£o encontradas")
        print("   O SDK n√£o poder√° ser usado")
    
    print("\n" + "="*60)
    print("‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
    print(f"   Ambiente: {AMBIENTE}")
    print(f"   Configura√ß√£o: OK")
    print(f"   SDK MP: {'Dispon√≠vel (n√£o inicializado)' if sdk_disponivel() else 'N√£o dispon√≠vel'}")
    print(f"   Bot Telegram: {'Configurado' if TOKEN_BOT else 'N√£o configurado'}")
    print(f"   Grupo VIP: {GROUP_CHAT_ID if GROUP_CHAT_ID else 'N√£o configurado'}")
    print("="*60)
