import os
from dotenv import load_dotenv

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

# üîë Credenciais Mercado Pago (produ√ß√£o)
PUBLIC_KEY = os.getenv("PUBLIC_KEY")
TOKEN_MERCADOPAGO = os.getenv("MERCADOPAGO_ACCESS_TOKEN")

# Debug do TOKEN_MERCADOPAGO
print("DEBUG TOKEN_MERCADOPAGO:", repr(TOKEN_MERCADOPAGO))

# ü§ñ Token do bot do Telegram
TOKEN_BOT = os.getenv("TELEGRAM_TOKEN")

# üë§ IDs e Links
MY_CHAT_ID = os.getenv("MY_CHAT_ID")
GROUP_INVITE_LINK = os.getenv("GROUP_INVITE_LINK")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")

# Valida√ß√£o das vari√°veis de ambiente
def validar_config():
    """Valida se todas as vari√°veis de ambiente necess√°rias est√£o configuradas"""
    variaveis_necessarias = {
        "TOKEN_MERCADOPAGO": TOKEN_MERCADOPAGO,
        "TOKEN_BOT": TOKEN_BOT,
        "MY_CHAT_ID": MY_CHAT_ID,
        "GROUP_INVITE_LINK": GROUP_INVITE_LINK,
        "GROUP_CHAT_ID": GROUP_CHAT_ID
    }
    
    variaveis_faltando = []
    for nome, valor in variaveis_necessarias.items():
        if not valor:
            variaveis_faltando.append(nome)
    
    if variaveis_faltando:
        print("‚ùå ERRO: As seguintes vari√°veis de ambiente n√£o est√£o configuradas:")
        for var in variaveis_faltando:
            print(f"   - {var}")
        print("\nüìù Configure estas vari√°veis no Railway ou no arquivo .env local")
        return False
    
    print("‚úÖ Todas as vari√°veis de ambiente est√£o configuradas!")
    return True

# Converte IDs para inteiro se necess√°rio
try:
    if MY_CHAT_ID:
        MY_CHAT_ID = int(MY_CHAT_ID)
    if GROUP_CHAT_ID:
        GROUP_CHAT_ID = int(GROUP_CHAT_ID)
except (ValueError, TypeError):
    print("‚ö†Ô∏è Aviso: Erro ao converter IDs para inteiro")
